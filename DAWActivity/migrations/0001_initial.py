# Generated by Django 5.1.1 on 2024-09-10 19:28

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, to_field='username')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('subjectName', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='Subject name')),
            ],
        ),
        migrations.CreateModel(
            name='New',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('desc', models.CharField(max_length=2000, verbose_name='Description')),
                ('registeredDateTime', models.DateTimeField(verbose_name='Registration date')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('title', 'registeredDateTime'), name='New_title_registeredDateTime')],
            },
        ),
        migrations.CreateModel(
            name='Village',
            fields=[
                ('villageName', models.CharField(max_length=50, verbose_name='Village Name')),
                ('dailyFood', models.IntegerField(verbose_name='Daily food obtained')),
                ('dailyWood', models.IntegerField(verbose_name='Daily wood obtained')),
                ('dailyStone', models.IntegerField(verbose_name='Daily stone obtained')),
                ('storedFood', models.IntegerField(verbose_name='Total food stored')),
                ('storedWood', models.IntegerField(verbose_name='Total wood stored')),
                ('storedStone', models.IntegerField(verbose_name='Total stone stored')),
                ('foodLevel', models.IntegerField(verbose_name='Food level')),
                ('woodLevel', models.IntegerField(verbose_name='Wood level')),
                ('stoneLevel', models.IntegerField(verbose_name='Stone level')),
                ('wallLevel', models.IntegerField(verbose_name='Walls level')),
                ('storageLevel', models.IntegerField(verbose_name='Storage level')),
                ('soldiers', models.IntegerField(verbose_name='Amount of units')),
                ('lastLogin', models.DateField(verbose_name='Last login')),
                ('disabled', models.BooleanField(verbose_name='Disabled')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='DAWActivity.student', to_field='user_id')),
            ],
        ),
        migrations.AddField(
            model_name='student',
            name='subject',
            field=models.ManyToManyField(to='DAWActivity.subject'),
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testName', models.CharField(max_length=50, verbose_name='Test name')),
                ('date', models.DateTimeField(verbose_name='Available from')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DAWActivity.subject')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questionText', models.CharField(max_length=50, verbose_name='Question')),
                ('expectedText', models.CharField(blank=True, max_length=100, verbose_name='Expected text')),
                ('questionType', models.CharField(choices=[('Opciones', 'Opciones'), ('Relleno', 'Relleno')], max_length=50, verbose_name='Type')),
                ('testName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DAWActivity.test', to_field='testName')),
            ],
        ),
        migrations.CreateModel(
            name='TestResolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(verbose_name='Points obtained')),
                ('studentName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DAWActivity.student', to_field='user_id')),
                ('testName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DAWActivity.test', to_field='testName')),
            ],
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questionOptionText', models.CharField(max_length=50, verbose_name='Option 1')),
                ('correctOption', models.BooleanField(verbose_name='Correct')),
                ('questionText', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DAWActivity.question')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('questionOptionText', 'questionText'), name='Option_questionText_questionOptionText')],
            },
        ),
        migrations.CreateModel(
            name='Upgrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registeredDateTime', models.DateTimeField(verbose_name='Registration date')),
                ('level', models.IntegerField(verbose_name='Level to upgrade to')),
                ('building', models.IntegerField(verbose_name='Building')),
                ('woodCost', models.IntegerField(verbose_name='WoodCost')),
                ('stoneCost', models.IntegerField(verbose_name='StoneCost')),
                ('completed', models.BooleanField(verbose_name='Completed')),
                ('village', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DAWActivity.village')),
            ],
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registeredDateTime', models.DateTimeField(verbose_name='Registration date')),
                ('units', models.IntegerField(verbose_name='Units')),
                ('foodCost', models.IntegerField(verbose_name='FoodCost')),
                ('completed', models.BooleanField(verbose_name='Completed')),
                ('village', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DAWActivity.village')),
            ],
        ),
        migrations.CreateModel(
            name='TradeOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registeredDateTime', models.DateTimeField(verbose_name='Registration date')),
                ('wantedWood', models.IntegerField(verbose_name='Wanted wood')),
                ('wantedFood', models.IntegerField(verbose_name='Wanted food')),
                ('wantedStone', models.IntegerField(verbose_name='Wanted stone')),
                ('offeredWood', models.IntegerField(verbose_name='Offered wood')),
                ('offeredFood', models.IntegerField(verbose_name='Offered food')),
                ('offeredStone', models.IntegerField(verbose_name='Offered stone')),
                ('accepted', models.BooleanField(verbose_name='Offering accepted')),
                ('destination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Destination', to='DAWActivity.village')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Source', to='DAWActivity.village')),
            ],
        ),
        migrations.CreateModel(
            name='Bonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registeredDateTime', models.DateTimeField(verbose_name='Registration date')),
                ('bonusType', models.IntegerField(verbose_name='Bonus type')),
                ('bonusAmount', models.IntegerField(verbose_name='Bonus amount')),
                ('completed', models.BooleanField(verbose_name='Completed')),
                ('village', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DAWActivity.village')),
            ],
        ),
        migrations.CreateModel(
            name='Attack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usedSoldiers', models.IntegerField(verbose_name='Soldiers')),
                ('registeredDateTime', models.DateTimeField(verbose_name='Registration date')),
                ('completed', models.BooleanField(verbose_name='Completed')),
                ('attacker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Attacker', to='DAWActivity.village')),
                ('defendant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Defendant', to='DAWActivity.village')),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activityText', models.CharField(max_length=150, verbose_name='Activity description')),
                ('activityDate', models.DateTimeField(verbose_name='Time registered')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DAWActivity.village')),
            ],
        ),
        migrations.AddConstraint(
            model_name='test',
            constraint=models.UniqueConstraint(fields=('testName',), name='Test_testName'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(fields=('questionText', 'testName'), name='Question_questionText_testName'),
        ),
        migrations.AddConstraint(
            model_name='testresolution',
            constraint=models.UniqueConstraint(fields=('testName', 'studentName'), name='TestResolution_testName_studentName'),
        ),
        migrations.AddConstraint(
            model_name='upgrade',
            constraint=models.UniqueConstraint(fields=('village', 'registeredDateTime'), name='Upgrade_village_registeredDateTime'),
        ),
        migrations.AddConstraint(
            model_name='training',
            constraint=models.UniqueConstraint(fields=('village', 'registeredDateTime'), name='Training_village_registeredDateTime'),
        ),
        migrations.AddConstraint(
            model_name='tradeoffer',
            constraint=models.UniqueConstraint(fields=('source', 'destination', 'registeredDateTime'), name='TradeOffer_source_destination_registeredDateTime'),
        ),
        migrations.AddConstraint(
            model_name='bonus',
            constraint=models.UniqueConstraint(fields=('village', 'registeredDateTime'), name='Bonus_village_registeredDateTime'),
        ),
        migrations.AddConstraint(
            model_name='attack',
            constraint=models.UniqueConstraint(fields=('attacker', 'defendant', 'registeredDateTime'), name='Attack_attacker_defendant_registeredDateTime'),
        ),
        migrations.AddConstraint(
            model_name='activity',
            constraint=models.UniqueConstraint(fields=('activityDate', 'owner', 'activityText'), name='Activity_date_owner_activityText'),
        ),
    ]
